#!/usr/bin/env zsh

# shortcut to this dotfiles path is $ZSH
export ZSH="$HOME/.dotfiles"

# your project folder that we can `c [tab]` to
export PROJECTS="$HOME/code"

# path to (work) journal
export JOURNAL_DIR="$HOME/Google Drive/notes"

# github API token (request quota issue)
export HOMEBREW_GITHUB_API_TOKEN="e4ae9ca7f28e6896a7e81a65760c0b35f16d5b7f"

# set locale
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# all of our zsh files
typeset -U config_files
config_files=($ZSH/*/*.zsh)

# load the path files
source "$ZSH/homebrew/path.zsh"
for file in ${(M)config_files:#*/path.zsh}; do
  source "$file"
done

source "$ZSH/zsh/zshrc.plug"

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}; do
  source "$file"
done

# NOTE: autoload is in ./zshrc.pluginconf
# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit && compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}; do
  source "$file"
done

unset config_files

# zsh-history-substring-search #
zmodload zsh/terminfo
bindkey "$terminfo[cuu1]" history-substring-search-up
bindkey "$terminfo[cud1]" history-substring-search-down

# "Emacs" mode
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down

# own bin
export PATH=$HOME/bin:$PATH

# virtualenvwrapper
export PATH=/usr/local/opt/python/libexec/bin:$PATH
export WORKON_HOME=$HOME/py_environments
source /usr/local/bin/virtualenvwrapper.sh

# k6 tool
export PATH=$GOPATH/src/github.com/loadimpact/k6:$PATH

# RUST: Cargo & rust src (required for `racer` to work)
export PATH=$HOME/.cargo/bin:$PATH
export RUST_SRC_PATH=$HOME/.multirust/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src

# initialize rbenv
eval "$(rbenv init -)"

# NODE: nvm, yarn
export NVM_DIR="$HOME/.nvm"
source "/usr/local/opt/nvm/nvm.sh"
# tabtab source for yarn package - uninstall with `tabtab uninstall yarn`
[[ -f /Users/corrni/.config/yarn/global/node_modules/tabtab/.completions/yarn.zsh ]] && . /Users/corrni/.config/yarn/global/node_modules/tabtab/.completions/yarn.zsh


# ASDF: erlang, elixir
source "/usr/local/Cellar/asdf/0.3.0/asdf.sh"
source "/usr/local/Cellar/asdf/0.3.0/etc/bash_completion.d/asdf.bash"

# asdf-erlang build options
export ERLANG_CONFIGURE_OPTIONS="--enable-darwin-64bit --with-ssl=/usr/local/opt/openssl --with-wx"


# base16_solarized-light color scheme
BASE16_SHELL=$HOME/.config/base16-shell/
[ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"

# use .localrc for SUPER SECRET CRAP that you don't
[[ -a ~/.localrc ]] && source ~/.localrc

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/Users/corrni/.sdkman"
[[ -s "/Users/corrni/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/corrni/.sdkman/bin/sdkman-init.sh"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/corrni/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/corrni/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/corrni/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/corrni/google-cloud-sdk/completion.zsh.inc'; fi
