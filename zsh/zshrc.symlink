#!/usr/bin/env zsh

# set locale
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# shortcut to this dotfiles path is $DOTFILES
export DOTFILES="$HOME/.dotfiles"

# project folder that we can `c [tab]` to
export PROJECTS="$HOME/code"

# squid cache
# FSO: auto-discovering the IP that'll work for mac apps as well as
#      VMs & containers
export PROXY_HOST=127.0.0.1
export PROXY_PORT=3128
if netstat -lant -p TCP | grep -qs "\.$PROXY_PORT.*\*\.\*.*LISTEN"; then
  export HTTP_PROXY=http://$PROXY_HOST:$PROXY_PORT
  export HTTPS_PROXY=http://$PROXY_HOST:$PROXY_PORT
  export FTP_PROXY=http://$PROXY_HOST:$PROXY_PORT
  export http_proxy=http://$PROXY_HOST:$PROXY_PORT
  export https_proxy=http://$PROXY_HOST:$PROXY_PORT
  export ftp_proxy=http://$PROXY_HOST:$PROXY_PORT
else
  unset PROXY_HOST
  unset PROXY_PORT
fi

####

# all of our zsh files
typeset -U config_files
config_files=($DOTFILES/*/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}; do
  source "$file"
done

# load antibody plugins
source ~/.zsh_plugins.sh

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}; do
  source "$file"
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit && compinit -u

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}; do
  source "$file"
done

unset config_files

# own bins
export PATH=$HOME/bin:$PATH

# [ruby] initialize rbenv
eval "$(rbenv init -)"

# [python] virtualenvwrapper
export PATH=/usr/local/opt/python/libexec/bin:$PATH
export WORKON_HOME=$HOME/py_environments
source /usr/local/bin/virtualenvwrapper.sh

# [rust]
export PATH=$HOME/.cargo/bin:$PATH
# required for `racer`
export RUST_SRC_PATH=$HOME/.multirust/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src

# [node] nvm, yarn-completions
export NVM_DIR="$HOME/.nvm"
source "/usr/local/opt/nvm/nvm.sh"
# place this after nvm initialization!
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# tabtab source for yarn package - uninstall with `tabtab uninstall yarn`
[[ -f /Users/corrni/.config/yarn/global/node_modules/tabtab/.completions/yarn.zsh ]] && . /Users/corrni/.config/yarn/global/node_modules/tabtab/.completions/yarn.zsh

# Postgres.app
export PATH=/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH

# [base16] color schemes helper
BASE16_SHELL=$HOME/.config/base16-shell/
[ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"

# JVM
export SDKMAN_DIR="/Users/corrni/.sdkman"
[[ -s "/Users/corrni/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/corrni/.sdkman/bin/sdkman-init.sh"

[[ -a ~/.localrc ]] && source ~/.localrc

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Added by Amplify CLI binary installer
export PATH="$HOME/.amplify/bin:$PATH"

# pnpm
export PNPM_HOME="/Users/corrni/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# zsh
source <(fzf --zsh)

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/terraform terraform

# 1Password CLI
eval "$(op completion zsh)"; compdef _op op
